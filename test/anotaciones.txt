WORK IN PROGRESS

Aproximadamente 7 horas de trabajo, entre el viernes 24 (10-12), sábado 25 (17-19), lunes 26 (17-18:30), martes 27 (15-16:30)

Actualmente el programa está preparado para que dado un número de iteraciones dadas previamente (en el código) el servidor ejecuta tantos threads
como clientes soliciten el servicio. Cuando se completan las iteraciones el servidor espera (activa) a que los threads terminen y finaliza.

El cliente envía un primer mensaje en el que si introduce "Nada" recibirá la respuesta del servidor "Nada encontrado" y se cerrará el cliente (de ser
finalmente así habría que añadir un precio por el servicio en esta finalización). Si introduce "Denegar" recibirá el mensaje "Servicio denegado" y volverá 
a efectuar una solicitud pasado un cierto tiempo hasta que reciba un mensaje distinto al de "Servicio denegado". Si envía cualquier otro mensaje recibe una
URL que pasa a abir en el navegador.
En el segundo mensaje enviado por el cliente se solicita un restaurante enviando el mensaje "Rest" o la finalización del servicio con el mensaje "Fin",
si se solicita un restaurante se reciben unas coordenadas que se pasan a abrir en el navegador. En el otro caso se recibe un mensaje con el precio del servicio.
El tercer mensaje es de terminación obligada ("Fin"), se recibe como respuesta el precio del servicio.

*Notas:
-Solo están programados los mensajes de error proporcionados en la práctica 5 (error en creación de socket, envío o recepción de mensajes,...)
-En todos los casos de finalización estándar (no por error) es el cliente el que cierra el socket. Hay que estudiar si es más conveniente que lo haga
el servidor.
-En esta versión del código he añadido funciones recibirMensaje y enviarMensaje con el fin de acortar el código y mejorar su visibilidad. Se puede
dejar como antes en caso de que fuera necesario/no os guste.
-Los mensajes del cliente en esta versión son escritos manualmente por el usuario. Hay una función para generar strings aleatorios que serviría para el 
primer mensaje con unas pocas modificaciones. Para los otros dos mensajes bastaría con guardarlos en un array y seleccionarlos aleatoriamente (por ejemplo).

Algunas cosas importantes por hacer:
	-Sincronización de threads para terminación adecuada
	-Comentarios y cabecera

He estado compilando y ejecutando en hendrix con putty y Xming (para que se abra el navegador) y aparentemente que hay funciona correctamente.
He usado el makefile que dieron para la práctica 5 y sus Socket.cpp y Socket.h

